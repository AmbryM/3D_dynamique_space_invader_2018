<html><head>
<title>SpaceShip</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">

<script type="text/javascript" src="gl-matrix.js"></script>
<script type="text/javascript" src="webgl-utils.js"></script>
<script type="text/javascript" src="game-utils.js"></script>
<script type="text/javascript" src="fbo.js"></script>
<script type="text/javascript" src="heightfield.js"></script>
<script type="text/javascript" src="interface.js"></script>
<script type="text/javascript" src="background.js"></script>
<script type="text/javascript" src="spaceship.js"></script>
<script type="text/javascript" src="enemy.js"></script>
<script type="text/javascript" src="tir.js"></script>
<script type="text/javascript" src="EnnemyManager.js"></script>

<script id="heightfield-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition, 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>

<script id="heightfield-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

uniform vec2 uOffset;
uniform float uAmplitude; // amplitude du bruit
uniform float uFrequency; // frequence du bruit
uniform float uPersistence; // persistence du bruit

varying vec2 vTextureCoord; // recuperation de la coord rasterisee

float hash(vec2 p) {
    // pseudo random fonction
    float h = dot(mod(p,vec2(100.0)),vec2(127.1,311.7));
    return -1.0 + 2.0*fract(sin(h)*43758.5453123);
}

float vnoise(in vec2 p) {
    // genere une valeur random sur une position spécifique d'une grille
    // pris sur shadertoy
    vec2 i = floor(p);
    vec2 f = fract(p);

    vec2 u = f*f*(3.0-2.0*f);

    return mix( mix( hash( i + vec2(0.0,0.0) ),
                     hash( i + vec2(1.0,0.0) ), u.x),
                mix( hash( i + vec2(0.0,1.0) ),
                     hash( i + vec2(1.0,1.0) ), u.x), u.y);
}

float fractalNoise(in vec2 p) {
    const int nb = 5; // nb octave
    float f = uFrequency; // frequency
    float a = uAmplitude; // amplitude
    float e = uPersistence; // persistence

    float n = 0.0;
    for(int i=0;i<nb;++i) {
        n = n + a*vnoise(p*f);
        f = 2.0*f;
        a = a*e;
    }
    return n;
}

void main(void) {
    vec2 p = vTextureCoord*2.0-vec2(1.0); // coordonnees
    float n = fractalNoise(p+uOffset)*0.5+0.5; // bruit

    gl_FragColor = vec4(vec3(n),1.0);

}
</script>

<script id="background-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition, 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>

<script id="background-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

uniform sampler2D uHeightfield; // la texture de hauteurs
uniform vec2 uTextureSize; // la taille de la texture
varying vec2 vTextureCoord; // recuperation de la coord rasterisee

vec3 shade(in vec3 n,in float d) {
    vec2 xy = vTextureCoord.xy*2.0-vec2(1.0);
    vec3 v = -normalize(vec3(xy.x,xy.y,1.0)); // vecteur vue
    vec3 l = normalize(vec3(-0.3,0.0,1.0)); // vecteur lumière (pourrait varier au cours du temps pour de meilleurs effets)

    // TODO : le shading !
    // la fonction prend en entrée la normale du terrain et sa profondeur

    return n;
}

vec3 computeNormal() {
    const float scale = 20.0;

    vec2 ps = 1.0/uTextureSize;
    float xp = texture2D(uHeightfield,vTextureCoord+vec2( ps.x,0.0)).x;
    float xm = texture2D(uHeightfield,vTextureCoord+vec2(-ps.x,0.0)).x;
    float yp = texture2D(uHeightfield,vTextureCoord+vec2(0.0, ps.y)).x;
    float ym = texture2D(uHeightfield,vTextureCoord+vec2(0.0,-ps.y)).x;

    float gx = 0.5*(xp-xm)*scale;
    float gy = 0.5*(yp-ym)*scale;

    vec3 v1 = normalize(vec3(1.0,0.0,gx));
    vec3 v2 = normalize(vec3(0.0,1.0,gy));

    return cross(v1,v2);
}

void main(void) {
    float d = texture2D(uHeightfield,vTextureCoord).x;
    vec3 n = computeNormal();
    vec3 s = shade(n,d);
    gl_FragColor = vec4(s,1.0);

}
</script>

<script id="spaceship-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    uniform vec2 uPosition; // position du vaisseau
    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>
<script id="spaceship-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

varying vec2 vTextureCoord; // recuperation de la coord rasterisee

uniform sampler2D uMaTexture; // la texture en entree

void main(void) {
     vec4 couleurTexture= texture2D(uMaTexture,vTextureCoord);
     gl_FragColor = couleurTexture;
}
</script>

<script id="enemy-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    uniform vec2 uPosition; // position du vaisseau
    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>
<script id="enemy-fs" type="x-shader/x-fragment">
	// *** le fragment shader ***
	precision highp float; // precision des nombres flottant

	varying vec2 vTextureCoord; // recuperation de la coord rasterisee

	uniform sampler2D uMaTexture; // la texture en entree

	void main(void) {
		 gl_FragColor = texture2D(uMaTexture,vTextureCoord);
	}
</script>

<script id="tir-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    uniform vec2 uPosition; // position du vaisseau
    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>
<script id="tir-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

varying vec2 vTextureCoord; // recuperation de la coord rasterisee

	uniform sampler2D uMaTexture; // la texture en entree

	void main(void) {
		 gl_FragColor = texture2D(uMaTexture,vTextureCoord);
	}
</script>

<script type="text/javascript">

    var fbo; // le FBO utilisé pour rendre la texture de hauteur
    var heightfield; // l'objet heightfield, sa géométrie, son shader
    var interfac; // l'objet heightfield, sa géométrie, son shader
    var background; // l'objet background, sa géométrie, son shader
    var spaceship; // l'objet spaceship, sa géométrie, son shader
    var tirs = [];
    var enemies = [];

    var textureShip;
    var textureLaser;
    var textureExplosion;
    var textureEnnemy1;
    var textureEnnemy2;
    var textureEnnemy3;

    function handleLoadedTexture(texture) {
        // active la texture (les operations qui suivent feront effet sur celle-ci)
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

        // envoie les donnees sur GPU
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);

        // options (filtrage+effets de bordure)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

        // desactive la texture courante
        gl.bindTexture(gl.TEXTURE_2D, null);
    }

    function initTexture() {

        textureExplosion = gl.createTexture();
	    textureExplosion.image = new Image();
	    textureExplosion.image.onload = function () {
	    	handleLoadedTexture(textureExplosion);
	    }
	    textureExplosion.image.src = "sprites/explosion.png";
        // creation de la texture
        textureShip = gl.createTexture();
        textureShip.image = new Image();
        textureShip.image.onload = function () {
            handleLoadedTexture(textureShip)
        }
        textureShip.image.src = "sprites/spaceship_doritos.png";

        textureLaser = gl.createTexture();
        textureLaser.image = new Image();
        textureLaser.image.onload = function () {
            handleLoadedTexture(textureLaser)
        }
        textureLaser.image.src = "sprites/laser.png";

        //Chargement des textures des ennemis
        textureEnnemy1 = gl.createTexture();
        textureEnnemy1.image = new Image();
        textureEnnemy1.image.onload = function () {
            handleLoadedTexture(textureEnnemy1)
        }
        textureEnnemy1.image.src = "sprites/ennemy1.png";
        textureEnnemy2 = gl.createTexture();
        textureEnnemy2.image = new Image();
        textureEnnemy2.image.onload = function () {
            handleLoadedTexture(textureEnnemy2)
        }
        textureEnnemy2.image.src = "sprites/ennemy2.png";
        textureEnnemy3 = gl.createTexture();
        textureEnnemy3.image = new Image();
        textureEnnemy3.image.onload = function () {
            handleLoadedTexture(textureEnnemy3)
        }
        textureEnnemy3.image.src = "sprites/ennemy3.png";



    }

    function drawInterface() {

    }

    function drawScene() {
        // initialisation du viewport
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

        // efface les buffers de couleur et de profondeur
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        // active le FBO (a partie de la, on dessine dans la texture associée)
        gl.bindFramebuffer(gl.FRAMEBUFFER,fbo.id());

        // dessin du heightfield
        gl.useProgram(heightfield.shader());
        heightfield.sendUniformVariables();
        heightfield.draw();

        // desactivation du FBO (on dessine sur l'ecran maintenant)
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);

        // dessin du background (utilise la texture dessinée précédemment)
        gl.useProgram(background.shader());
        background.sendUniformVariables();
        background.draw();

        // dessin du vaisseau (shader par defaut ici)
        gl.enable(gl.BLEND);
        gl.useProgram(spaceship.shader());
        spaceship.sendUniformVariables();
        gl.activeTexture(gl.TEXTURE0); // on active l'unite de texture 0
		gl.bindTexture(gl.TEXTURE_2D,textureShip); // on place maTexture dans l'unité active
		gl.uniform1i(spaceship.shader().maTextureUniform, 0); // on dit au shader que maTextureUniform se trouve sur l'unite de texture 0
        spaceship.draw();

        if(enemies.length != 0)
        {
			gl.useProgram(enemies[0].shader());
			for(i=0;i<enemies.length;i++)
			{
				enemies[i].sendUniformVariables();
				gl.activeTexture(gl.TEXTURE0); // on active l'unite de texture 0
				gl.bindTexture(gl.TEXTURE_2D,enemies[i].getTexture()); // on place maTexture dans l'unité active
				gl.uniform1i(enemies[i].shader().maTextureUniform, 0); // on dit au shader que maTextureUniform se trouve sur l'unite de texture 0
				enemies[i].draw();
			}
		}

        if(tirs.length != 0)
        {
			gl.useProgram(tirs[0].shader());
			for(i=0;i<tirs.length;i++)
			{
				tirs[i].sendUniformVariables();
				gl.activeTexture(gl.TEXTURE0); // on active l'unite de texture 0
				gl.bindTexture(gl.TEXTURE_2D,textureLaser); // on place maTexture dans l'unité active
				gl.uniform1i(tirs[i].shader().maTextureUniform, 0); // on dit au shader que maTextureUniform se trouve sur l'unite de texture 0
				tirs[i].draw();
			}
		}
    }

    // une bonne manière de gerer les evenements claviers
    // permet d'avoir plusieurs touches appuyées simultanémen
    var currentlyPressedKeys = {};

    function handleKeyDown(event) {
        currentlyPressedKeys[event.keyCode] = true;
    }


    function handleKeyUp(event) {
        currentlyPressedKeys[event.keyCode] = false;
    }

    function handleKeys() {
        // Barre espace
        if (currentlyPressedKeys[32]){
            // Ajout d'un tir
            addTir();
        }
        // Fleche gauche
        if (currentlyPressedKeys[37]){
            if(spaceship.getPosition()[0] > (-1 + (spaceship.width/2))){
                var newx = spaceship.getPosition()[0] - 0.03;
                var newy = spaceship.getPosition()[1];
                spaceship.setPosition(newx, newy);
            }
        }
        // Fleche haut
        if (currentlyPressedKeys[38]){
            if(spaceship.getPosition()[1] < (1 - (spaceship.height/2))){
                var newx = spaceship.getPosition()[0];
                var newy = spaceship.getPosition()[1] + 0.03;
                spaceship.setPosition(newx, newy);
            }
        }
        // Fleche droite
        if (currentlyPressedKeys[39]){
            if(spaceship.getPosition()[0] < (1 - (spaceship.width/2))){
                var newx = spaceship.getPosition()[0] + 0.03;
                var newy = spaceship.getPosition()[1];
                spaceship.setPosition(newx, newy);
            }
        }
        // Fleche bas
        if (currentlyPressedKeys[40]){
            if(spaceship.getPosition()[1] > (-1 + (spaceship.height/2))){
                var newx = spaceship.getPosition()[0];
                var newy = spaceship.getPosition()[1] - 0.03;
                spaceship.setPosition(newx, newy);
            }
        }
    }

    function mouseMove(event) {
        // controle de la position du vaisseau en fonction de la souris
        // la position est remappée entre -1 et 1 pour cela
        // var newx = 2.0*(event.clientX/gl.viewportWidth)-1.0;
        // var newy = -(2.0*(event.clientY/gl.viewportHeight)-1.0);
        // spaceship.setPosition(newx,newy);
    }


    // animation
    var lastTime = 0;
    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            // chaque objet est susceptible de s'animer
            var elapsed = timeNow - lastTime;
            heightfield.setParameters(elapsed);
            spaceship.setParameters(elapsed);
            background.setParameters(elapsed);
            ennemyManager.setParameters(elapsed);

            for (var i = 0; i < tirs.length; i++) {
                tirs[i].setParameters(elapsed);
            }
            for (var i = 0; i < enemies.length; i++) {
                enemies[i].setParameters(elapsed);
            }
        }
        lastTime = timeNow;
    }

    function tick() {
        requestAnimFrame(tick);
        handleKeys();
        drawScene();
        animate();
        // manageEnemies();
        updateTirs();
        updateEnemies();
    }


    function addTir(){
        var timeNow = new Date().getTime();
        if(timeNow - lastShot > fireTime){
            var position = spaceship.getPosition();
            var tir = new Tir();
            tir.setPosition(position[0], position[1]);
            tirs.push(tir);
            lastShot = timeNow;
        }
    }

    function updateTirs(){
        for(i=0;i<tirs.length;i++)
        {
			if(tirs[i].position[1] > 1)
			{
				tirs.splice(i,1);
			}
			else
			{
				//test collision
				for(j=0;j<enemies.length;j++)
				{
					//console.log(enemies[j].hitbox())
					// i coin haut gauche
					// a coin bas droite
					ix = enemies[j].position[0] - enemies[j].width/2;
					iy = enemies[j].position[1] - enemies[j].height/2;
					ax = enemies[j].position[0] + enemies[j].width/2;
					ay = enemies[j].position[1] + enemies[j].height/2;
					if( enemies[j].state == 0 && ix <= tirs[i].position[0] && tirs[i].position[0] <= ax && iy <= tirs[i].position[1] && tirs[i].position[1] <= ay  )
					{
						enemies[j].updateState(1); // l'ennemi explose
						tirs.splice(i,1);
					}

				}
			}
        }
    }

    function updateEnemies(){
        for(j=0;j<enemies.length;j++)
        {
			if(enemies[j].state == 2) // l'ennemi est mort, on l'enleve
			{enemies.splice(j,1);}
			else if(enemies[j].position[1] < -1)
			{
				enemies.splice(j,1);
			}
        }
    }

    function addEnnemy(typeCourbe, x,y, texture)
    {
		var enemy = new Enemy();
		enemy.setPosition(x,y);
		enemy.setTypeCourbe(typeCourbe);
		enemy.setTexture(texture);
		enemies.push(enemy);
    }

    function manageEnemies(){
        var timeNow = new Date().getTime();
        if(timeNow - lastEnemy > enemyCooldownTime){
            var enemy = new Enemy();
            var x = RandomMinMax(-1, 1);
            var y = 1 + enemy.height;
            enemy.setPosition(x, y);
            enemies.push(enemy);
            lastEnemy = timeNow;
        }
    }

    function RandomMinMax(min, max){
        return Math.random() * (max - min) + min;
    }

    function webGLStart() {
        // initialisation du canvas et des objets OpenGL
        var canvas = document.getElementById("SpaceShip");
        initGL(canvas);

        // init FBO
        fbo = new FBO(canvas.width,canvas.height,1,false);

        // init de tous les shaders
        initHeightfieldShader();
        initBackgroundShader();
        initSpaceshipShader();
        initEnemyShader();
        initTirShader();
        initTexture();


        // init de tous les objets
        heightfield = new Heightfield();
        interfac = new Interface();
        background = new Background(fbo.texture(0));
        spaceship = new Spaceship();
        ennemyManager = new EnnemyManager();


        // init temps entre chaque tir
        fireTime = 300;
        lastShot = new Date().getTime();

        // init temps entre chaque enemies
        enemyCooldownTime = 300;
        lastEnemy = new Date().getTime();

        // la couleur de fond sera noire
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // active le teste de profondeur
        gl.enable(gl.DEPTH_TEST);
        gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);

        /* Mouse and keyboard interaction functions */
        //canvas.addEventListener('mousedown', tbMouseDown, true);
        canvas.addEventListener('mousemove', mouseMove, true);
        //canvas.addEventListener('mouseup', tbMouseUp, true);

        document.onkeydown = handleKeyDown;
        document.onkeyup = handleKeyUp;

        // dessine la scene
        tick();
    }


</script>


</head>


<body onload="webGLStart();">
    <!-- <canvas id="welcome" style="border: none;" width="800" height="800"></canvas> -->
    <canvas id="SpaceShip" style="border: none;" width="800" height="800"></canvas>
</body></html>
